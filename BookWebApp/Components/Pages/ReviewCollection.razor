@page "/ReviewCollection"

<PageTitle>Review Collection</PageTitle>
@inject IJSRuntime JSRunTime
@inject IDialogService DialogService

<MudText Typo="Typo.h3">Review Collection</MudText>




<MudForm Class="mt-8" @ref="form" @bind-Errors="errors">
    <MudGrid>
        <MudItem xs="12" sm="6">
            <MudCard Outlined="true">
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Book Info</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudTextField Variant="Variant.Outlined"
                                  T="string"
                                  Label="ISBN"
                                  @bind-Value="@isbn"
                                  Immediate="true"
                                  Required
                                  RequiredError="ISBN is required." />
                    <MudTextField Variant="Variant.Outlined"
                                  T="string"
                                  Label="Title"
                                  @bind-Value="@title"
                                  Immediate="true"
                                  Required
                                  RequiredError="Title is required." />

                    <MudSelect T="string"
                               Label="Author"
                               Variant="Variant.Outlined"
                               @bind-Value="@author"
                               Immediate="true"
                               Required
                               RequiredError="Author is required.">
                        @foreach (string value in authorList)
                        {
                            <MudSelectItem Value="value" />
                        }
                    </MudSelect>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudCard Outlined="true">
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Address Info</MudText>
                </MudCardHeader>
                <MudCardContent>

                    <MudTextField Variant="Variant.Outlined"
                                  T="string"
                                  Label="Street Name"
                                  @bind-Value="@reviewer"
                                  Immediate="true"
                                  Required
                                  RequiredError="Reviewer is required." />
                    <MudSelect T="string"
                               Label="Rating Type"
                               Variant="Variant.Outlined"
                               @bind-Value="@rating"
                               Immediate="true"
                               Required
                               RequiredError="Author is required.">
                        @foreach (var type in Enum.GetValues(typeof(RatingType)))
                        {
                            <MudSelectItem Value="type" />
                        }
                    </MudSelect>
                    <MudTextField Variant="Variant.Outlined"
                                  T="string"
                                  Label="Comment"
                                  @bind-Value="@comment"
                                  Immediate="true"
                                  Required
                                  RequiredError="Comment is required." />
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12">
            <MudPaper Class="d-flex flex-wrap justify-center" Elevation="0">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddPerson">Add Person</MudButton>
                <MudSpacer />
                <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="ClearForm">Clear</MudButton>
                <MudSpacer />
                <MudButton Variant="Variant.Filled" Color="Color.Secondary">
                    <MudNavLink Href="/personreport">
                        View Report
                    </MudNavLink>
                </MudButton>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudForm>
<MudPaper Class="pt-4" Elevation="0">
    @if (!string.IsNullOrWhiteSpace(successMessage))
    {
        <MudText Typo="Typo.body2" Color="Color.Success">@successMessage</MudText>
    }
    @foreach (var error in errors)
    {
        <MudText Typo="Typo.body2" Color="Color.Error">@error</MudText>
    }
    @foreach (var error in errorMessages)
    {
        <MudText Typo="Typo.body2" Color="Color.Error">@error</MudText>
    }
</MudPaper>

@code {
    private List<string> authorList= [];
    private string isbn = string.Empty;
    private string title = string.Empty;
    private string author = string.Empty;
    private string reviewer = string.Empty;
    private string rating = string.Empty;
    private string comment = string.Empty;
    
    private Review review = null;
    private MudForm form = new();
    private string[] errors = { };
    private List<string> errorMessages = [];
    private string successMessage = string.Empty;

    protected override void OnInitialized()
    {
        authorList = new List<string>
        {
        "Karen Miller",
        "Adrian Tchaikovsky",
        "Cixin Liu"

        };
        base.OnInitialized();
    }

    private void AddPerson()
    {
        errorMessages.Clear();
        form.Validate();
        if (form.IsValid)
        {
            try
            {
                
                ///Console.WriteLine($"{ReviewData.isbn},{ReviewData.title},{ReviewData.author},{ReviewData.reviewer},{ReviewData.rating},{ReviewData.comment}");

                review = new Review(isbn,title,author,reviewer,(RatingType)Enum.Parse(typeof(RatingType), rating),comment);
                string fileName = @"wwwroot/Data/testdata.csv";
                string line = $"{review.ToString()}\n";
                File.AppendAllText(fileName, line);
                successMessage = $"{title} review added successfully!";
            }
            catch (Exception ex)
            {
                errorMessages.Add(GetInnerException(ex).Message);
            }
        }
    }

    //Using JSRunTime service
    //We need to make the method async
    // private async Task ClearForm()
    // {

    //     //WARNING: remember to inject IJSRuntime at the top of the page! (after the @page and PageTitle)

    //     //issue a prompt dialogue to the user to obtain their confirmation of the action!
    //     //Create the message in a generic object array
    //     object[] confirmationMessage = new object[] { "Clearing will lose any unsaved data. Are you sure you want to clear the form?" };

    //     if(await JSRunTime.InvokeAsync<bool>("confirm", confirmationMessage))
    //     {
    //         await form.ResetAsync();
    //         errorMessages.Clear();
    //         successMessage = string.Empty;
    //     }
    // }

    //MudBlazor Method using DialogService
    private async void ClearForm()
    {
        bool? result = await DialogService.ShowMessageBox("Confirm Clear", "Clearing will lose any unsaved data. Are you sure you want to clear the form?", yesText: "Clear Form", cancelText: "No don't!", noText: "Really don't Clear!");

        //Yes results = true, No result = false, Cancel result = null
        if (result != null && result != false)
        {
            await form.ResetAsync();
            errorMessages.Clear();
            successMessage = string.Empty;
        }
    }

    private Exception GetInnerException(Exception ex)
    {
        //drill down into your Exception until there are no more inner exceptions
        //at this point you have the "real" error
        while (ex.InnerException != null)
            ex = ex.InnerException;
        return ex;
    }
}



@code{
    /*

		FormCompletedText = $"User {ReviewData.isbn} logged in.";
		
		bool valid = true;

		if (string.IsNullOrWhiteSpace(ReviewData.isbn)) { valid = false; errorText += "INVALID ISBN (MISSING)\n"; }
		if (string.IsNullOrWhiteSpace(ReviewData.title)) { valid = false; errorText += "INVALID TITLE (MISSING)\n"; }
		if (string.IsNullOrWhiteSpace(ReviewData.author)) { valid = false; errorText += "INVALID ISBN (MISSING)\n"; }
		if (string.IsNullOrWhiteSpace(ReviewData.reviewer)) { valid = false; errorText += "INVALID REVIEWER (MISSING)\n"; }
		if (string.IsNullOrWhiteSpace(ReviewData.rating)) { valid = false; errorText += "INVALID RATING (MISSING)\n"; }
		if (string.IsNullOrWhiteSpace(ReviewData.comment)) { valid = false; errorText += "INVALID COMMENT (MISSING)\n"; }

		/// 978-1529091427,The Tiger and the Wolf,Adrian Tchaikovsky,don welch,Buy,Adrian's imagination is at it again. Mixing adventure and magic into an endearing tale.
		//	return $"{ISBN},{Title},{Author},{Reviewer},{Rating},{Comment}";
		Console.WriteLine($"{ReviewData.isbn},{ReviewData.title},{ReviewData.author},{ReviewData.reviewer},{ReviewData.rating},{ReviewData.comment}");
		ReviewData = new Data();

	}
    */

}
